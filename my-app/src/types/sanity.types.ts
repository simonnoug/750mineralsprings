/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type ImageWithTitle = {
  _type: "imageWithTitle";
  file?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  title?: string;
};

export type Marquee = {
  _id: string;
  _type: "marquee";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  content?: string;
  link?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "event";
  };
};

export type Support = {
  _id: string;
  _type: "support";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  membership?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
  payment?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
  image?: ImageWithCaption;
};

export type About = {
  _id: string;
  _type: "about";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  contact?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
  about?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
};

export type Home = {
  _id: string;
  _type: "home";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  image?: ImageWithCaption;
};

export type Event = {
  _id: string;
  _type: "event";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  date?: string;
  id?: number;
  slug?: Slug;
  springs?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "spring";
  }>;
  description?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
  images?: Array<{
    _key: string;
  } & ImageWithCaption>;
};

export type Friend = {
  _id: string;
  _type: "friend";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  status?: "Team" | "Board" | "Sulfur" | "Iron" | "Saline";
  subtitle?: string;
  description?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
  image?: ImageWithCaption;
  slug?: Slug;
};

export type ImageWithCaption = {
  _type: "imageWithCaption";
  file?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  caption?: string;
};

export type Spring = {
  _id: string;
  _type: "spring";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  id?: number;
  location?: Geopoint;
  region?: "Attica" | "Central Greece" | "Central Macedonia" | "Crete" | "Eastern Macedonia and Thrace" | "Epirus" | "Ionian Islands" | "North Aegean" | "Peloponnese" | "South Aegean" | "Thessaly" | "Western Greece" | "Western Macedonia";
  municipality?: string;
  note?: string;
  properties?: "Radon" | "Alcaline" | "Sulfur";
  access?: "Open" | "No access" | "Unknown";
  ownership?: {
    shortOption?: "Public" | "Private" | "Unknown";
    longerOption?: string;
  };
  treatment?: "Arthiritis" | "Rashes";
  images?: Array<{
    _key: string;
  } & ImageWithTitle>;
  slug?: Slug;
};

export type MediaTag = {
  _id: string;
  _type: "media.tag";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: Slug;
};

export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions";
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot";
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageCrop = {
  _type: "sanity.imageCrop";
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type SanityImageAsset = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type Geopoint = {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
};

export type Slug = {
  _type: "slug";
  current?: string;
  source?: string;
};

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
};

export type AllSanitySchemaTypes = ImageWithTitle | Marquee | Support | About | Home | Event | Friend | ImageWithCaption | Spring | MediaTag | SanityImagePaletteSwatch | SanityImagePalette | SanityImageDimensions | SanityImageHotspot | SanityImageCrop | SanityFileAsset | SanityImageAsset | SanityImageMetadata | Geopoint | Slug | SanityAssetSourceData;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ./src/lib/sanity.ts
// Variable: springsQuery
// Query: *[_type == "spring"] | order(id asc){    _id,    id,    name,    location,    region,    ownership,    access,    properties,    treatment,    // grab the raw slug object    slug  }
export type SpringsQueryResult = Array<{
  _id: string;
  id: number | null;
  name: string | null;
  location: Geopoint | null;
  region: "Attica" | "Central Greece" | "Central Macedonia" | "Crete" | "Eastern Macedonia and Thrace" | "Epirus" | "Ionian Islands" | "North Aegean" | "Peloponnese" | "South Aegean" | "Thessaly" | "Western Greece" | "Western Macedonia" | null;
  ownership: {
    shortOption?: "Private" | "Public" | "Unknown";
    longerOption?: string;
  } | null;
  access: "No access" | "Open" | "Unknown" | null;
  properties: "Alcaline" | "Radon" | "Sulfur" | null;
  treatment: "Arthiritis" | "Rashes" | null;
  slug: Slug | null;
}>;
// Variable: springBySlugQuery
// Query: *[_type == "spring" && slug.current == $slug][0]{    _id,    id,    name,    slug,    location,    region,    municipality,    note,    ownership,    access,    properties,    treatment,    // ─────────────────────────────────────────────    // Pull in any events that reference this spring    "events": *[_type == "event" && references(^._id)]{      _id,      title,      date,      "slug": slug.current,      // any other event fields you need    },    images[]{title, file}   }
export type SpringBySlugQueryResult = {
  _id: string;
  id: number | null;
  name: string | null;
  slug: Slug | null;
  location: Geopoint | null;
  region: "Attica" | "Central Greece" | "Central Macedonia" | "Crete" | "Eastern Macedonia and Thrace" | "Epirus" | "Ionian Islands" | "North Aegean" | "Peloponnese" | "South Aegean" | "Thessaly" | "Western Greece" | "Western Macedonia" | null;
  municipality: string | null;
  note: string | null;
  ownership: {
    shortOption?: "Private" | "Public" | "Unknown";
    longerOption?: string;
  } | null;
  access: "No access" | "Open" | "Unknown" | null;
  properties: "Alcaline" | "Radon" | "Sulfur" | null;
  treatment: "Arthiritis" | "Rashes" | null;
  events: Array<{
    _id: string;
    title: string | null;
    date: string | null;
    slug: string | null;
  }>;
  images: Array<{
    title: string | null;
    file: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    } | null;
  }> | null;
} | null;
// Variable: getEventsQuery
// Query: *[_type == "event"] | order(date desc){    title,    date,    "slug": slug.current,    "image": images[0].file  }
export type GetEventsQueryResult = Array<{
  title: string | null;
  date: string | null;
  slug: string | null;
  image: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  } | null;
}>;
// Variable: getEventBySlugQuery
// Query: *[_type == "event" && slug.current == $slug][0]{    slug,    id,    title,    date,    description,    images,    springs[] -> {id, name, "slug": slug.current}  }
export type GetEventBySlugQueryResult = {
  slug: Slug | null;
  id: number | null;
  title: string | null;
  date: string | null;
  description: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }> | null;
  images: Array<{
    _key: string;
  } & ImageWithCaption> | null;
  springs: Array<{
    id: number | null;
    name: string | null;
    slug: string | null;
  }> | null;
} | null;
// Variable: getHomeQuery
// Query: *[_type == "home" && _id=="homePage"][0]{image}
export type GetHomeQueryResult = {
  image: ImageWithCaption | null;
} | null;
// Variable: getAboutQuery
// Query: *[_type == "about" && _id=="aboutPage"][0]{contact, about, _id}
export type GetAboutQueryResult = {
  contact: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }> | null;
  about: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }> | null;
  _id: string;
} | null;
// Variable: getFriendsQuery
// Query: *[_type == "friend"]
export type GetFriendsQueryResult = Array<{
  _id: string;
  _type: "friend";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  status?: "Board" | "Iron" | "Saline" | "Sulfur" | "Team";
  subtitle?: string;
  description?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
  image?: ImageWithCaption;
  slug?: Slug;
}>;
// Variable: getFriendBySlugQuery
// Query: *[_type == "friend" && slug.current == $slug][0]{    slug,    name,    description,    image,  }
export type GetFriendBySlugQueryResult = {
  slug: Slug | null;
  name: string | null;
  description: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }> | null;
  image: ImageWithCaption | null;
} | null;
// Variable: getSupportQuery
// Query: *[_type == "support"][0]{image, membership, payment}
export type GetSupportQueryResult = {
  image: ImageWithCaption | null;
  membership: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }> | null;
  payment: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }> | null;
} | null;
// Variable: getMarqueeQuery
// Query: *[_type == "marquee"][0]{content, link -> {slug}}
export type GetMarqueeQueryResult = {
  content: string | null;
  link: {
    slug: Slug | null;
  } | null;
} | null;

// Query TypeMap
import "@sanity/client";
declare module "@sanity/client" {
  interface SanityQueries {
    "\n  *[_type == \"spring\"] | order(id asc){\n    _id,\n    id,\n    name,\n    location,\n    region,\n    ownership,\n    access,\n    properties,\n    treatment,\n    // grab the raw slug object\n    slug\n  }": SpringsQueryResult;
    "\n  *[_type == \"spring\" && slug.current == $slug][0]{\n    _id,\n    id,\n    name,\n    slug,\n    location,\n    region,\n    municipality,\n    note,\n    ownership,\n    access,\n    properties,\n    treatment,\n    // \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n    // Pull in any events that reference this spring\n    \"events\": *[_type == \"event\" && references(^._id)]{\n      _id,\n      title,\n      date,\n      \"slug\": slug.current,\n      // any other event fields you need\n    },\n    images[]{title, file} \n  }": SpringBySlugQueryResult;
    "*[_type == \"event\"] | order(date desc){\n    title,\n    date,\n    \"slug\": slug.current,\n    \"image\": images[0].file\n  }": GetEventsQueryResult;
    "*[_type == \"event\" && slug.current == $slug][0]{\n    slug,\n    id,\n    title,\n    date,\n    description,\n    images,\n    springs[] -> {id, name, \"slug\": slug.current}\n  }": GetEventBySlugQueryResult;
    "*[_type == \"home\" && _id==\"homePage\"][0]{image}": GetHomeQueryResult;
    "*[_type == \"about\" && _id==\"aboutPage\"][0]{contact, about, _id}": GetAboutQueryResult;
    "*[_type == \"friend\"]": GetFriendsQueryResult;
    "*[_type == \"friend\" && slug.current == $slug][0]{\n    slug,\n    name,\n    description,\n    image,\n  }": GetFriendBySlugQueryResult;
    "*[_type == \"support\"][0]{image, membership, payment}": GetSupportQueryResult;
    "*[_type == \"marquee\"][0]{content, link -> {slug}}": GetMarqueeQueryResult;
  }
}
